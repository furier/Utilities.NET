using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

// ReSharper disable MemberCanBePrivate.Global

namespace Utilities.NET.Extensions
{
    public static class ObjectExtensions
    {
        /// <summary>
        ///     Gets the property value of <paramref name="obj"/> by looking up properties on the object by <paramref name="name"/>
        ///     and retrieving the value with reflection.
        /// </summary>
        /// <remarks>
        ///     If the property is not found `null` is returned.
        /// </remarks>
        /// <param name="obj"> The object to lookup the property on. </param>
        /// <param name="name"> The name of the property. </param>
        /// <returns> The value reflected value of the property on the <paramref name="obj"/>. </returns>
        public static object GetPropertyValue(this object obj, string name)
        {
            foreach (var part in name.Split('.'))
            {
                if (obj == null) return null;

                var type = obj.GetType();
                var info = type.GetField(part, BindingFlags.Instance | BindingFlags.NonPublic);
                if (info != null)
                {
                    obj = info.GetValue(obj);
                }
                else
                {
                    // This is for autogenerated backingfields for private properties.
                    info = type.GetField($"<{part}>k__BackingField", BindingFlags.Instance | BindingFlags.NonPublic);
                    if (info == null) return null;

                    obj = info.GetValue(obj);
                }
            }

            return obj;
        }

        /// <summary>
        ///     Gets the property value of <paramref name="obj"/> by looking up properties on the object by <paramref name="name"/>
        ///     and retrieving the value with reflection.
        /// </summary>
        /// <remarks>
        ///     If the property is not found `null` is returned.
        /// </remarks>
        /// <param name="obj"> The object to lookup the property on. </param>
        /// <param name="name"> The name of the property. </param>
        /// <param name="silent">
        ///     When set to `true` silences any <see cref="Exception"/> thrown, and returns the default value for
        ///     <typeparamref name="T"/>.
        /// </param>
        /// <returns> The value reflected value of the property on the <paramref name="obj"/>. </returns>
        public static T GetPropertyValue<T>(this object obj, string name, bool silent = false)
        {
            try
            {
                var value = GetPropertyValue(obj, name);
                if (value == null) return default(T);
                return (T) value;
            }
            catch (Exception e)
            {
                return silent ? default(T) : throw e;
            }
        }

        /// <summary>
        ///     Changes the type of the parameter <paramref name="value"/> to type <typeparamref name="T"/> and returns the value
        ///     as the new type.
        /// </summary>
        /// <typeparam name="T"> The type to convert the value to. </typeparam>
        /// <param name="value"> The value to convert to the new type. </param>
        /// <example>
        ///     Changing an object to an enum type:
        ///     <code>
        ///     public class ObjectExtensionsTests : UnitTestBase
        ///     {
        ///         public enum FooBar
        ///         {
        ///             Foo = -1,
        ///             Bar = 1
        ///         }
        ///     
        ///         [Test]
        ///         [TestCase(FooBar.Foo, ExpectedResult = FooBar.Foo)]
        ///         [TestCase(FooBar.Bar, ExpectedResult = FooBar.Bar)]
        ///         [TestCase("Foo", ExpectedResult = FooBar.Foo)]
        ///         [TestCase("Bar", ExpectedResult = FooBar.Bar)]
        ///         [TestCase(-1, ExpectedResult = FooBar.Foo)]
        ///         [TestCase(1, ExpectedResult = FooBar.Bar)]
        ///         [TestCase(null, ExpectedResult = default(FooBar))]
        ///         public FooBar ChangeTypeWhereGenericParameterIsTypeOfEnum(object @object)
        ///         {
        ///             return @object.ChangeType&lt;FooBar&gt;();
        ///         }
        ///     }
        ///     </code>
        /// </example>
        /// <returns>
        ///     Returns the parameter <paramref name="value"/> as type <typeparamref name="T"/>, however if parameter
        ///     <paramref name="value"/> is null, default(<typeparamref name="T"/>) is returned.
        /// </returns>
        public static T ChangeType<T>(this object value)
        {
            return (T) ChangeType(value, typeof(T), default(T));
        }

        /// <summary>
        ///     Changes the type of the parameter <paramref name="value"/> to type <typeparamref name="T"/> and returns the value
        ///     as the new type.
        /// </summary>
        /// <typeparam name="T"> The type to convert the value to. </typeparam>
        /// <param name="value"> The value to convert to the new type. </param>
        /// <param name="defaultValue"> The default value to return if parameter <paramref name="value"/> is null. </param>
        /// <returns>
        ///     Returns the parameter <paramref name="value"/> as type <typeparamref name="T"/>, however if parameter
        ///     <paramref name="value"/> is null, <paramref name="defaultValue"/> is returned.
        /// </returns>
        public static T ChangeType<T>(this object value, T defaultValue)
        {
            return (T) ChangeType(value, typeof(T), defaultValue);
        }

        /// <summary>
        ///     Changes the type of the parameter <paramref name="value"/> to the type declared by <paramref name="type"/> and
        ///     returns the value as type <see cref="object"/>.
        /// </summary>
        /// <param name="value"> The value to convert to the new type. </param>
        /// <param name="type"> The type to convert the value to. </param>
        /// <returns>
        ///     Returns the parameter <paramref name="value"/> as the type declared by <paramref name="type"/>.
        /// </returns>
        public static object ChangeType(this object value, Type type)
        {
            return ChangeType(value, type, type.GetDefaultValue());
        }

        /// <summary>
        ///     Changes the type of the parameter <paramref name="value"/> to the type declared by <paramref name="type"/> and
        ///     returns the value as type <see cref="object"/>.
        /// </summary>
        /// <param name="value"> The value to convert to the new type. </param>
        /// <param name="type"> The type to convert the value to. </param>
        /// <param name="defaultValue"> The default value to return if parameter <paramref name="value"/> is null. </param>
        /// <returns>
        ///     Returns the parameter <paramref name="value"/> as the type declared by <paramref name="type"/>, however if
        ///     parameter
        ///     <paramref name="value"/> is null, <paramref name="defaultValue"/> is returned.
        /// </returns>
        public static object ChangeType(this object value, Type type, object defaultValue)
        {
            if (value == null) return defaultValue;
            if (value.GetType() == type) return value;
            try
            {
                if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>))
                    type = Nullable.GetUnderlyingType(type) ?? type;

                if (type.IsEnum)
                {
                    if (value is string s) return s.ToEnum(type, null, false);
                    var i = value as int? ?? int.MinValue;
                    if (i != int.MinValue) return i.ToEnum(type, null, false);
                }

                if (type == typeof(double) || type == typeof(float))
                {
                    return value.ToString().IsNullOrEmpty() 
                        ? defaultValue : 
                        Convert.ChangeType(value.ToString().Replace(',', '.'), type, CultureInfo.InvariantCulture);
                }

                if (type != typeof(bool) || !(value is string))
                    return Convert.ChangeType(value, type);

                if (bool.TryParse((string) value, out var boolValue))
                    return boolValue;

                if (int.TryParse((string) value, out var intValue))
                    return Convert.ChangeType(intValue, type);
                
            }
            catch (Exception ex)
            {
                throw new InvalidCastException($"Unable to cast value: [{value}] to type: [{type.Name}].", ex);
            }
            throw new InvalidCastException($"Unable to cast value: [{value}] to type: [{type.Name}].");
        }

        /// <summary>
        ///     Converts an object to a dictionary, by creating keys and stringified values for each property where the property
        ///     name is the key for its value.
        /// </summary>
        /// <param name="value"> The object to convert to a dictionary. </param>
        public static IDictionary<string, object> ToDictionaryAll(this object value)
        {
            var dictionary = new Dictionary<string, object>();
            if (value == null) return dictionary;

            foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(value))
                try
                {
                    if (descriptor?.Name == null) continue;

                    var propValue = descriptor.GetValue(value);

                    if (propValue != null)
                        dictionary.Add(descriptor.Name, propValue);
                }
                catch { }

            return dictionary;
        }

        /// <summary>
        ///     Converts an object and all the <paramref name="properties"/> defined in the expression to a dictionary,
        ///     where the name of the properties are the keys and values of the properties are the values stored per key.
        /// </summary>
        /// <typeparam name="T"> The type of <paramref name="source"/>. </typeparam>
        /// <param name="source"> The source object to extract the properties of as a dictionary. </param>
        /// <param name="properties"> The properties to extract as a dictionary. </param>
        /// <returns> The <paramref name="source"/> converted to a dictionary or the given <paramref name="properties"/>. </returns>
        public static IDictionary<string, object> ToDictionary<T>(this T source, params Expression<Func<T, object>>[] properties)
        {
            var descriptors = TypeDescriptor.GetProperties(source);
            return properties.Select(ExpressionHelper.GetMemberExpression)
                .Where(memberExpression => memberExpression != null && descriptors[memberExpression.Member.Name] != null)
                .ToDictionary(memberExpression => memberExpression.Member.Name, memberExpression => descriptors[memberExpression.Member.Name].GetValue(source));
        }
    }
}